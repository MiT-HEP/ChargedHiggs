import sys,os

# xml etree  dont have cdata ?!?
# I didn't implement the escape of <, > &

class Comment:
	def __init__(self,text):
		self.text=text

	def write(self):
		return "<!--" + self.text + "-->"

class CDATA:
	def __init__(self,text):
		self.text=text
	def write(self):
		return "<![CDATA[" + self.text + "]]>"

class Tag:
	def __init__(self,name,mydict={}):
		self.name=name
		self.mydict=mydict
		self.subtags=[]

	def write(self):
		out="<"+ self.name 
		for k in self.mydict:
			out+=' '+ k + '="'+self.mydict[k]+'"' 
		out += ">"
		for elem in self.subtags:
			out += elem.write()
		out+="</"+ self.name + ">"
		return out

	def add(self,t):
		self.subtags.append(t)



class FrameworkJobReport:
	def __init__(self):
		self.status=0
		self.errormex=""
		self.filename="FrameworkJobReport.xml"

	def dump(self):
		#fjr = etree.Element('FrameworkJobReport')

		fjr=Tag("FrameworkJobReport")
		comment = Comment('Automatically generated by amarini')
		fjr.add(comment)

		branches= Tag('ReadBranches')
		fjr.add(branches)

		performances = Tag('PerformanceReport')
		fjr.add(performances)

		summary = Tag('PerformanceSummary',{'Metric':'StorageStatistics'})

		summary.add( Tag("Metric",{"Name":"Parameter-untracked-bool-enabled","Value":"true"}) )
		summary.add( Tag("Metric",{"Name":"Parameter-untracked-bool-stats","Value":"true"})   )
		summary.add( Tag("Metric",{"Name":"Parameter-untracked-cacheHint","Value":"application-only"}))
		summary.add( Tag("Metric",{"Name":"Parameter-untracked-readHint","Value":"auto-detect"}) )
		summary.add( Tag("Metric",{"Name":"ROOT-tfile-read-totalMegabytes","Value":"0"})      )
		summary.add( Tag("Metric",{"Name":"ROOT-tfile-write-totalMegabytes","Value":"0"})     )

		performances.add(summary)


		fjr.add(Tag("GeneratorInfo"))

		if self.status != 0 :
			error = Tag("FrameworkError",{ "ExitStatus":"%d"%self.status,"Type":"Fatal Exception"})
			error.add( CDATA("EXIT MSG=\n" + self.errormex) ) 
			fjr.add(error)

		####print fjr.write() ## valid but all in one line
		out=open (self.filename,"w")
		out.write( fjr.write() ) 
		out.close()
		return fjr.write()

if __name__ == "__main__":
	from optparse import OptionParser
	parser = OptionParser(usage="EXIT CODE")
	parser.add_option("-s","--status",type='int',help="exit status [%default]", default=0)
	opts,args=parser.parse_args()
	fjr=FrameworkJobReport()
	fjr.status = opts.status	
	fjr.errormex=sys.stdin.read()
	fjr.dump()

##<FrameworkJobReport>
##<ReadBranches>
##</ReadBranches>
##<PerformanceReport>
##  <PerformanceSummary Metric="StorageStatistics">
##    <Metric Name="Parameter-untracked-bool-enabled" Value="true"/>
##    <Metric Name="Parameter-untracked-bool-stats" Value="true"/>
##    <Metric Name="Parameter-untracked-string-cacheHint" Value="application-only"/>
##    <Metric Name="Parameter-untracked-string-readHint" Value="auto-detect"/>
##    <Metric Name="ROOT-tfile-read-totalMegabytes" Value="0"/>
##    <Metric Name="ROOT-tfile-write-totalMegabytes" Value="0"/>
##  </PerformanceSummary>
##</PerformanceReport>
##
##<GeneratorInfo>
##</GeneratorInfo>
##</FrameworkJobReport>

##<FrameworkError ExitStatus="EXIT CODE" Type="ERROR TYPE" >
##<![CDATA[
##	EXIT MESSAGE
##
##	]]>
##</FrameworkError>
